const express = require('express');
const router = express.Router();
const { createClient } = require('@supabase/supabase-js');
// Environment variables accessed via process.env

const { validateResidentNotification, validateRegularizationNotification, validateVisitorAuthorization } = require('../validators/notificationValidator');
const { sendWhatsApp } = require('../services/whatsappService');
const { generateRegistrationLink, generateWhatsAppMessage, generateRegularizationLink, generateRegularizationMessage, generateVisitorAuthorizationLink, generateVisitorAuthorizationMessage } = require('../utils/messageFormatter');

// Supabase configuration
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);

// POST /api/send-resident-whatsapp - Endpoint espec√≠fico para envio de mensagens WhatsApp para moradores
router.post('/send-resident-whatsapp', async (req, res) => {
  try {
    console.log('Enviando notifica√ß√£o WhatsApp para morador:', req.body);

    const { name, email, phone, building, apartment, building_id, profile_id } = req.body;

    if (!name || !email || !building || !apartment || !profile_id) {
      return res.status(400).json({
        success: false,
        error: 'Campos obrigat√≥rios: name, email, building, apartment, profile_id'
      });
    }

    // Buscar senha tempor√°ria no Supabase
    let temporary_password = 'Senha ser√° enviada em breve';
    try {
      const { data: passwordData, error: passwordError } = await supabase
        .from('temporary_passwords')
        .select('plain_password')
        .eq('profile_id', profile_id)
        .eq('used', false)
        .gt('expires_at', new Date().toISOString())
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (passwordError) {
        console.log('Nenhuma senha tempor√°ria encontrada para profile_id:', profile_id);
      } else if (passwordData) {
        temporary_password = passwordData.plain_password;
        console.log('Senha tempor√°ria encontrada para profile_id:', profile_id);
      }
    } catch (supabaseError) {
      console.error('Erro ao buscar senha tempor√°ria:', supabaseError.message);
      // Continua com a mensagem padr√£o
    }
    
    console.log('Dados para WhatsApp:', { name, email, phone, building, apartment, temporary_password });

    const whatsappMessage = `üè¢ JamesAvisa - Cadastro de Morador

Ol√° *${name}*!

Voc√™ foi convidado(a) para se cadastrar no JamesAvisa.

üìç Dados do seu apartamento:

üè¢ Pr√©dio: ${building}

üö™ Apartamento: ${apartment}

üîê SUAS CREDENCIAIS DE ACESSO:

üìß Usu√°rio (Email): ${email}

üîë Senha tempor√°ria: ${temporary_password || 'Ser√° enviada em breve'}

üí° IMPORTANTE: Use seu email como usu√°rio para fazer login!

Acesse jamesavisa.jamesconcierge.com para saber mais e baixar nosso app para completar seu cadastro.

Com o JamesAvisa voc√™ pode:

‚úÖ Receber visitantes com mais seguran√ßa

‚úÖ Autorizar entregas remotamente

‚úÖ Comunicar-se diretamente com a portaria

‚úÖ Acompanhar movimenta√ß√µes do seu apartamento

Mensagem enviada automaticamente pelo sistema JamesAvisa`

    try {
      // Se houver telefone, envia por WhatsApp, sen√£o apenas registra o sucesso
      if (phone) {
        await sendWhatsApp({
          to: phone,
          message: whatsappMessage
        });
        console.log('WhatsApp enviado com sucesso para:', phone);
      } else {
        console.log('Cadastro realizado sem envio de WhatsApp (telefone n√£o fornecido)');
      }
    } catch (whatsappError) {
      console.error('Erro ao enviar WhatsApp:', whatsappError.message);
      // Don't fail the registration if WhatsApp fails
    }

    res.json({
      success: true,
      message: 'Cadastro iniciado com sucesso! Verifique seu WhatsApp para as credenciais de acesso.',
      data: {
          profile_id: profile_id,
          building_name: building,
          apartment_number: apartment
        }
    });

  } catch (error) {
    console.error('Erro no cadastro de morador:', error);

    if (error instanceof z.ZodError) {
      return res.status(400).json({
        success: false,
        error: 'Dados inv√°lidos',
        details: error.errors
      });
    }

    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor'
    });
  }
});

// POST /api/send-porteiro-whatsapp - Endpoint espec√≠fico para envio de mensagens WhatsApp para porteiros
router.post('/send-porteiro-whatsapp', async (req, res) => {
  try {
    console.log('Enviando notifica√ß√£o WhatsApp para porteiro:', req.body);

    const { name, email, phone, building, cpf, work_schedule, profile_id } = req.body;

    if (!name || !email || !building || !profile_id) {
      return res.status(400).json({
        success: false,
        error: 'Campos obrigat√≥rios: name, email, building, profile_id'
      });
    }

    // Buscar senha tempor√°ria no Supabase
    let temporary_password = 'Senha ser√° enviada em breve';
    try {
      const { data: passwordData, error: passwordError } = await supabase
        .from('temporary_passwords')
        .select('plain_password')
        .eq('profile_id', profile_id)
        .eq('used', false)
        .gt('expires_at', new Date().toISOString())
        .order('created_at', { ascending: false })
        .limit(1)
        .single();

      if (passwordError) {
        console.log('Nenhuma senha tempor√°ria encontrada para profile_id:', profile_id);
      } else if (passwordData) {
        temporary_password = passwordData.plain_password;
        console.log('Senha tempor√°ria encontrada para profile_id:', profile_id);
      }
    } catch (supabaseError) {
      console.error('Erro ao buscar senha tempor√°ria:', supabaseError.message);
      // Continua com a mensagem padr√£o
    }
    
    console.log('Dados para WhatsApp:', { name, email, phone, building, cpf, work_schedule, temporary_password });

    // Formata√ß√£o do hor√°rio de trabalho
    const workScheduleText = work_schedule ? 
      `\nüïê Hor√°rio de trabalho: ${work_schedule}` : '';

    // Send WhatsApp notification with credentials for porteiro
    const whatsappMessage = `üè¢ JamesAvisa - Cadastro de Porteiro

Ol√° *${name}*!

Voc√™ foi cadastrado(a) como porteiro no JamesAvisa.

üìç Dados do seu trabalho:

üè¢ Pr√©dio: ${building}${workScheduleText}

üîê SUAS CREDENCIAIS DE ACESSO:

üìß Usu√°rio (Email): ${email}

üîë Senha tempor√°ria: ${temporary_password || 'Ser√° enviada em breve'}

üí° IMPORTANTE: Use seu email como usu√°rio para fazer login!

Acesse jamesavisa.jamesconcierge.com para saber mais e baixar nosso app.

Como porteiro no JamesAvisa voc√™ pode:

‚úÖ Gerenciar visitantes e entregas

‚úÖ Autorizar acessos remotamente

‚úÖ Comunicar-se com os moradores

‚úÖ Registrar ocorr√™ncias

‚úÖ Controlar entrada e sa√≠da de ve√≠culos

Mensagem enviada automaticamente pelo sistema JamesAvisa`;

    try {
      // Se houver telefone, envia por WhatsApp, sen√£o apenas registra o sucesso
      if (phone) {
        await sendWhatsApp({
          to: phone,
          message: whatsappMessage
        });
        console.log('WhatsApp enviado com sucesso para porteiro:', phone);
      } else {
        console.log('Cadastro de porteiro realizado sem envio de WhatsApp (telefone n√£o fornecido)');
      }
    } catch (whatsappError) {
      console.error('Erro ao enviar WhatsApp para porteiro:', whatsappError.message);
      // Don't fail the registration if WhatsApp fails
    }

    res.json({
      success: true,
      message: 'Cadastro de porteiro iniciado com sucesso! Verifique seu WhatsApp para as credenciais de acesso.',
      data: {
        profile_id: profile_id,
        building_name: building,
        work_schedule: work_schedule
      }
    });

  } catch (error) {
    console.error('Erro no cadastro de porteiro:', error);

    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor'
    });
  }
});

// GET /api/whatsapp-status - Verificar status da inst√¢ncia WhatsApp
router.get('/whatsapp-status', async (req, res) => {
  try {
    const status = await checkInstanceStatus();
    res.json(status);
  } catch (error) {
    res.status(500).json({
      connected: false,
      error: 'Erro ao verificar status da inst√¢ncia'
    });
  }
});

// GET /api/whatsapp-qr - Gerar QR Code para conectar WhatsApp
router.get('/whatsapp-qr', async (req, res) => {
  try {
    const qrData = await generateQRCode();
    res.json(qrData);
  } catch (error) {
    res.status(500).json({
      error: error.message
    });
  }
});

// POST /api/send-regularization-whatsapp - Endpoint para envio de mensagens de regulariza√ß√£o para moradores
router.post('/send-regularization-whatsapp', async (req, res) => {
  const startTime = Date.now();
  console.log('üöÄ Iniciando envio de mensagem de regulariza√ß√£o WhatsApp para morador:', req.body);
  
  try {
    // Validar dados usando o validator
    const validation = validateRegularizationNotification(req.body);
    if (!validation.success) {
      console.error('‚ùå Dados inv√°lidos:', validation.errors);
      return res.status(400).json({ 
        success: false, 
        whatsappSent: false, 
        error: 'Dados inv√°lidos',
        details: validation.errors,
        timestamp: new Date().toISOString()
      });
    }

    const regularizationData = validation.parsed;
    if (regularizationData.phone) {
      regularizationData.phone = regularizationData.phone.replace(/\D/g, ''); // Remove caracteres n√£o num√©ricos
    }

    console.log('‚úÖ Dados de regulariza√ß√£o validados:', {
      name: regularizationData.name,
      email: regularizationData.email,
      phone: regularizationData.phone,
      building: regularizationData.building,
      apartment: regularizationData.apartment,
      issueType: regularizationData.issueType
    });

    // Gerar link de regulariza√ß√£o personalizado
    const regularizationLink = generateRegularizationLink(regularizationData, regularizationData.regularizationUrl);
    console.log('üîó Link de regulariza√ß√£o gerado:', regularizationLink);

    // Gerar mensagem formatada
    const whatsappMessage = generateRegularizationMessage(regularizationData, regularizationLink);
    console.log('üìù Mensagem de regulariza√ß√£o formatada:', whatsappMessage.substring(0, 100) + '...');

    // Enviar mensagem via WhatsApp (se telefone estiver dispon√≠vel)
    let whatsappResult = null;
    if (regularizationData.phone) {
      whatsappResult = await sendWhatsApp({
        to: regularizationData.phone,
        message: whatsappMessage
      });
      console.log(`‚úÖ Mensagem de regulariza√ß√£o WhatsApp enviada com sucesso para:`, regularizationData.phone);
    } else {
      console.log('‚úÖ Regulariza√ß√£o processada sem envio de WhatsApp (telefone n√£o fornecido)');
    }

    const duration = Date.now() - startTime;

    res.json({
      success: true,
      whatsappSent: true,
      messageId: whatsappResult.messageId,
      regularizationLink,
      recipient: {
        name: regularizationData.name,
        email: regularizationData.email,
        phone: regularizationData.phone,
        building: regularizationData.building,
        apartment: regularizationData.apartment,
        issueType: regularizationData.issueType
      },
      timestamp: new Date().toISOString(),
      duration: `${duration}ms`
    });

  } catch (error) {
    const duration = Date.now() - startTime;
    console.error('‚ùå Erro ao enviar mensagem de regulariza√ß√£o WhatsApp:', error.message);
    console.error('Stack trace:', error.stack);

    res.status(500).json({
      success: false,
      whatsappSent: false,
      error: error.message,
      timestamp: new Date().toISOString(),
      duration: `${duration}ms`
    });
  }
});

// POST /api/send-visitor-authorization-whatsapp - Endpoint para envio de mensagens de autoriza√ß√£o de visitante
router.post('/send-visitor-authorization-whatsapp', async (req, res) => {
  const startTime = Date.now();
  console.log('üöÄ Iniciando envio de mensagem de autoriza√ß√£o de visitante WhatsApp:', req.body);
  
  try {
    // Validar dados usando o validator
    const validation = validateVisitorAuthorization(req.body);
    if (!validation.success) {
      console.error('‚ùå Dados inv√°lidos:', validation.errors);
      return res.status(400).json({ 
        success: false, 
        whatsappSent: false, 
        error: 'Dados inv√°lidos',
        details: validation.errors,
        timestamp: new Date().toISOString()
      });
    }

    const authorizationData = validation.parsed;
    if (authorizationData.residentPhone) {
      authorizationData.residentPhone = authorizationData.residentPhone.replace(/\D/g, ''); // Remove caracteres n√£o num√©ricos
    }

    console.log('‚úÖ Dados de autoriza√ß√£o de visitante validados:', {
      visitorName: authorizationData.visitorName,
      residentName: authorizationData.residentName,
      residentEmail: authorizationData.residentEmail,
      residentPhone: authorizationData.residentPhone,
      building: authorizationData.building,
      apartment: authorizationData.apartment
    });

    // Gerar link de autoriza√ß√£o personalizado
    const authorizationLink = generateVisitorAuthorizationLink(authorizationData);
    console.log('üîó Link de autoriza√ß√£o gerado:', authorizationLink);

    // Gerar mensagem formatada
    const whatsappMessage = generateVisitorAuthorizationMessage(authorizationData, authorizationLink);
    console.log('üìù Mensagem de autoriza√ß√£o formatada:', whatsappMessage);

    // Enviar mensagem via WhatsApp (se telefone estiver dispon√≠vel)
    let whatsappResult = null;
    if (authorizationData.residentPhone) {
      whatsappResult = await sendWhatsApp({
        to: authorizationData.residentPhone,
        message: whatsappMessage
      });
      console.log(`‚úÖ Mensagem de autoriza√ß√£o WhatsApp enviada com sucesso para:`, authorizationData.residentPhone);
    } else {
      console.log('‚úÖ Autoriza√ß√£o processada sem envio de WhatsApp (telefone n√£o fornecido)');
    }

    const duration = Date.now() - startTime;

    res.json({
      success: true,
      whatsappSent: true,
      messageId: whatsappResult.messageId,
      authorizationLink,
      recipient: {
        visitorName: authorizationData.visitorName,
        residentName: authorizationData.residentName,
        residentEmail: authorizationData.residentEmail,
        residentPhone: authorizationData.residentPhone,
        building: authorizationData.building,
        apartment: authorizationData.apartment
      },
      timestamp: new Date().toISOString(),
      duration: `${duration}ms`
    });

  } catch (error) {
    const duration = Date.now() - startTime;
    console.error('‚ùå Erro ao enviar mensagem de autoriza√ß√£o WhatsApp:', error.message);
    console.error('Stack trace:', error.stack);

    res.status(500).json({
      success: false,
      whatsappSent: false,
      error: error.message,
      timestamp: new Date().toISOString(),
      duration: `${duration}ms`
    });
  }
});

module.exports = router;