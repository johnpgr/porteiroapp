import { test } from 'node:test';
import assert from 'node:assert/strict';
import { SupabaseClientFactory } from '@porteiroapp/common/supabase';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://ycamhxzumzkpxuhtugxc.supabase.co';
const supabaseAnonKey =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InljYW1oeHp1bXprcHh1aHR1Z3hjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3MjEwMzEsImV4cCI6MjA3MTI5NzAzMX0.CBgkeAVbxlyJHftmVWSkSPefrbOdMckMvtakRTDpgc8';
const supabaseServiceKey =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InljYW1oeHp1bXprcHh1aHR1Z3hjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTcyMTAzMSwiZXhwIjoyMDcxMjk3MDMxfQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

const { client: supabase } = SupabaseClientFactory.createBrowserClient({
  url: supabaseUrl,
  anonKey: supabaseAnonKey,
});
const { client: supabaseAdmin } = SupabaseClientFactory.createServerClient({
  url: supabaseUrl,
  anonKey: supabaseServiceKey,
});

// Dados de teste
const testCredentials = {
  email: 'morador@teste.com',
  password: 'morador123',
};

// Fun√ß√£o para simular o TokenStorage
class MockTokenStorage {
  static storage = new Map();

  static async saveUserData(userData: any, token: string, expiresAt: string): Promise<void> {
    this.storage.set('userData', userData);
    this.storage.set('token', token);
    this.storage.set('expiresAt', expiresAt);
    console.log('‚úÖ Token salvo no storage simulado');
  }

  static async getToken(): Promise<string | null> {
    const token = this.storage.get('token');
    const expiresAt = this.storage.get('expiresAt');

    if (!token || !expiresAt) {
      return null;
    }

    // Verificar se o token expirou
    if (new Date() > new Date(expiresAt)) {
      console.log('‚ö†Ô∏è Token expirado, limpando storage');
      this.clearAll();
      return null;
    }

    return token;
  }

  static async getUserData(): Promise<any> {
    return this.storage.get('userData');
  }

  static async clearAll(): Promise<void> {
    this.storage.clear();
    console.log('üßπ Storage limpo');
  }

  static async hasValidToken(): Promise<boolean> {
    const token = await this.getToken();
    return !!token;
  }
}

// Fun√ß√£o para aguardar um tempo
function sleep(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// Teste 1: Login e persist√™ncia de token
test('Teste 1: Login e persist√™ncia de token', async () => {
  console.log('\nüß™ Teste 1: Login e persist√™ncia de token');

  try {
    // Limpar storage antes do teste
    await MockTokenStorage.clearAll();

    // Fazer login com conta de teste existente
    console.log('üì§ Fazendo login...');
    const { data, error } = await supabase.auth.signInWithPassword(testCredentials);

    if (error) {
      throw new Error(`Erro no login: ${error.message}`);
    }

    assert.ok(data.session, 'Login n√£o retornou sess√£o');
    assert.ok(data.user, 'Login n√£o retornou usu√°rio');

    console.log('‚úÖ Login realizado com sucesso');
    console.log(`üë§ Usu√°rio: ${data.user.email}`);

    // Simular salvamento do token (como faria o TokenStorage)
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 30); // 30 dias

    await MockTokenStorage.saveUserData(
      {
        id: data.user.id,
        email: data.user.email,
        user_type: 'morador',
      },
      data.session.access_token,
      expiresAt.toISOString()
    );

    // Verificar se o token foi salvo
    const savedToken = await MockTokenStorage.getToken();
    assert.ok(savedToken, 'Token n√£o foi salvo corretamente');

    console.log('‚úÖ Token persistido com sucesso');

    // Fazer logout
    await supabase.auth.signOut();
    console.log('üö™ Logout realizado');

    console.log('‚úÖ Teste de login e persist√™ncia passou');
  } catch (error: any) {
    console.error('‚ùå Erro no teste de login:', error.message);
    throw error;
  }
});

// Teste 2: Restaura√ß√£o de sess√£o
test('Teste 2: Restaura√ß√£o de sess√£o', async () => {
  console.log('\nüß™ Teste 2: Restaura√ß√£o de sess√£o');

  try {
    // Fazer login primeiro
    console.log('üì§ Fazendo login inicial...');
    const { data, error } = await supabase.auth.signInWithPassword(testCredentials);

    if (error) throw new Error(`Erro no login: ${error.message}`);

    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 30);

    await MockTokenStorage.saveUserData(
      {
        id: data.user.id,
        email: data.user.email,
        user_type: 'morador',
      },
      data.session.access_token,
      expiresAt.toISOString()
    );

    console.log('‚úÖ Login inicial realizado e token salvo');

    // Simular reinicializa√ß√£o do app - verificar sess√£o
    console.log('üîÑ Simulando reinicializa√ß√£o do app...');

    const { data: sessionData } = await supabase.auth.getSession();

    if (sessionData.session) {
      console.log('‚úÖ Sess√£o ativa encontrada');
      console.log(`üë§ Usu√°rio logado: ${sessionData.session.user.email}`);
    } else {
      console.log('‚ö†Ô∏è Nenhuma sess√£o ativa, tentando restaurar...');

      // Tentar restaurar sess√£o usando token salvo
      const savedToken = await MockTokenStorage.getToken();
      const userData = await MockTokenStorage.getUserData();

      if (savedToken && userData) {
        console.log('üîë Token encontrado no storage, tentando restaurar sess√£o...');

        // Verificar se o token ainda √© v√°lido no Supabase
        const { data: userInfo, error: userError } = await supabase.auth.getUser(savedToken);

        if (userError || !userInfo.user) {
          console.log('‚ùå Token inv√°lido, limpando storage');
          await MockTokenStorage.clearAll();
        } else {
          console.log('‚úÖ Sess√£o restaurada com sucesso');
          console.log(`üë§ Usu√°rio restaurado: ${userInfo.user.email}`);
        }
      } else {
        console.log('‚ùå Nenhum token v√°lido para restaura√ß√£o');
      }
    }

    console.log('‚úÖ Teste de restaura√ß√£o de sess√£o passou');
  } catch (error: any) {
    console.error('‚ùå Erro no teste de restaura√ß√£o:', error.message);
    throw error;
  }
});

// Teste 3: Expira√ß√£o de token
test('Teste 3: Expira√ß√£o de token', async () => {
  console.log('\nüß™ Teste 3: Expira√ß√£o de token');

  try {
    // Simular token expirado
    const expiredDate = new Date();
    expiredDate.setMinutes(expiredDate.getMinutes() - 1); // 1 minuto atr√°s

    await MockTokenStorage.saveUserData({ id: 'test', email: 'test@test.com' }, 'expired_token', expiredDate.toISOString());

    console.log('‚è∞ Token expirado simulado salvo');

    // Tentar recuperar token expirado
    const token = await MockTokenStorage.getToken();

    assert.equal(token, null, 'Token expirado n√£o foi removido automaticamente');

    console.log('‚úÖ Token expirado foi removido automaticamente');

    // Verificar se o storage foi limpo
    const userData = await MockTokenStorage.getUserData();
    assert.equal(userData, undefined, 'Dados do usu√°rio n√£o foram limpos ap√≥s expira√ß√£o do token');

    console.log('‚úÖ Storage foi limpo ap√≥s expira√ß√£o');
    console.log('‚úÖ Teste de expira√ß√£o de token passou');
  } catch (error: any) {
    console.error('‚ùå Erro no teste de expira√ß√£o:', error.message);
    throw error;
  }
});

// Teste 4: Refresh de token
test('Teste 4: Refresh de token', async () => {
  console.log('\nüß™ Teste 4: Refresh de token');

  try {
    // Fazer login para ter uma sess√£o ativa
    const { data, error } = await supabase.auth.signInWithPassword(testCredentials);
    if (error) throw new Error(`Erro no login: ${error.message}`);

    console.log('‚úÖ Login realizado para teste de refresh');

    // Tentar refresh da sess√£o
    const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();

    if (refreshError) {
      console.log(
        '‚ö†Ô∏è Erro no refresh (pode ser normal se o token ainda √© v√°lido):',
        refreshError.message
      );
    } else if (refreshData.session) {
      console.log('‚úÖ Token refreshed com sucesso');
      console.log(`üîë Novo token gerado: ${refreshData.session.access_token.substring(0, 20)}...`);

      // Simular salvamento do novo token
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 30);

      await MockTokenStorage.saveUserData(
        {
          id: refreshData.user.id,
          email: refreshData.user.email,
          user_type: 'morador',
        },
        refreshData.session.access_token,
        expiresAt.toISOString()
      );

      console.log('‚úÖ Novo token salvo no storage');
    }

    // Fazer logout
    await supabase.auth.signOut();

    console.log('‚úÖ Teste de refresh de token passou');
  } catch (error: any) {
    console.error('‚ùå Erro no teste de refresh:', error.message);
    throw error;
  }
});
