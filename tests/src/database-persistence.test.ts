import { test } from 'node:test';
import assert from 'node:assert/strict';
import axios from 'axios';
import { SupabaseClientFactory } from '@porteiroapp/common/supabase';
import { getTestPhoneNumber } from './test-numbers.js';

// Configura√ß√£o da API e Supabase
const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

const { client: supabase } = SupabaseClientFactory.createServerClient({
  url: SUPABASE_URL,
  key: SUPABASE_SERVICE_KEY,
});

interface Response {
  success?: boolean;
  status?: number;
  error?: string;
  data?: any;
}

// Fun√ß√£o para fazer requisi√ß√µes HTTP
async function makeRequest(
  endpoint: string,
  data: any,
  method: string = 'POST'
): Promise<Response> {
  try {
    const response = await axios({
      method,
      url: `${API_BASE_URL}${endpoint}`,
      data,
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 10000,
    });
    return response;
  } catch (error: any) {
    if (error.response) {
      return error.response;
    }
    throw error;
  }
}

// Fun√ß√£o auxiliar para validar UUID
function isValidUUID(uuid: string): boolean {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(uuid);
}

// Fun√ß√£o auxiliar para validar email tempor√°rio
function isValidTempEmail(email: string, phone: string): boolean {
  const expectedEmail = `${phone}@temp.jamesconcierge.com`;
  return email === expectedEmail;
}

// Fun√ß√£o para limpar dados de teste do banco
async function cleanupTestData(phone: string): Promise<void> {
  console.log(`üßπ Limpando dados de teste para telefone: ${phone}`);

  try {
    // Limpar da tabela temporary_passwords (usando profile_id se necess√°rio)
    const { error: tempError } = await supabase
      .from('temporary_passwords')
      .delete()
      .eq('profile_id', phone);

    if (tempError) {
      console.log('Aviso ao limpar temporary_passwords:', tempError.message);
    }

    // Limpar da tabela profiles
    const { error: profileError } = await supabase.from('profiles').delete().eq('phone', phone);

    if (profileError) {
      console.log('Aviso ao limpar profiles:', profileError.message);
    }

    console.log(`‚úÖ Limpeza conclu√≠da para ${phone}`);
  } catch (error: any) {
    console.log(`Aviso na limpeza para ${phone}:`, error.message);
  }
}

// Teste 1: Verificar resposta do endpoint
test('Teste 1: Verifica√ß√£o de resposta do endpoint', async () => {
  console.log('\nüß™ Teste 1: Verifica√ß√£o de resposta do endpoint');

  const testData = {
    name: 'Maria Santos',
    phone: getTestPhoneNumber(),
    building: 'Edif√≠cio Teste Persist√™ncia',
    apartment: '205',
    building_id: '123e4567-e89b-12d3-a456-426614174000',
    temporary_password: 'TempPass123!',
  };

  // Fazer requisi√ß√£o para registrar residente
  const result = await makeRequest('/api/register-resident', testData);

  assert.ok(result.status === 200, `Falha na requisi√ß√£o: ${result.error || 'Status ' + result.status}`);

  // Verificar se a resposta cont√©m os campos esperados
  assert.ok(
    result.data.profile_id && result.data.email && result.data.building_name && result.data.apartment_number,
    'Resposta n√£o cont√©m todos os campos esperados'
  );

  // Verificar se os dados da resposta correspondem aos enviados
  assert.equal(
    result.data.building_name,
    testData.building,
    'Dados da resposta n√£o correspondem aos dados enviados'
  );
  assert.equal(result.data.apartment_number, testData.apartment);

  console.log('‚úÖ Resposta cont√©m dados corretos:', result.data);
  console.log('‚úÖ Teste de resposta do endpoint passou');
});

// Teste 2: Verifica√ß√£o de integridade da resposta
test('Teste 2: Verifica√ß√£o de integridade da resposta', async () => {
  console.log('\nüß™ Teste 2: Verifica√ß√£o de integridade da resposta');

  const testData = {
    name: 'Jo√£o Teste Persist√™ncia',
    phone: getTestPhoneNumber(),
    building: 'Edif√≠cio Teste DB',
    apartment: '101',
    building_id: '123e4567-e89b-12d3-a456-426614174000',
    temporary_password: 'TestPass123!',
  };

  // Fazer requisi√ß√£o
  const result = await makeRequest('/api/register-resident', testData);

  assert.ok(result.status === 200, `Falha na requisi√ß√£o: ${result.error || 'Status ' + result.status}`);

  console.log('üì§ Requisi√ß√£o enviada com sucesso');

  // Verificar estrutura da resposta
  const requiredFields = ['profile_id', 'email', 'building_name', 'apartment_number'];
  for (const field of requiredFields) {
    assert.ok(result.data[field], `Campo obrigat√≥rio ausente na resposta: ${field}`);
  }

  // Verificar se o email foi gerado corretamente
  assert.ok(
    isValidTempEmail(result.data.email, testData.phone),
    `Email incorreto. Esperado: ${testData.phone}@temp.jamesconcierge.com, Recebido: ${result.data.email}`
  );

  // Verificar se o profile_id √© um UUID v√°lido
  assert.ok(isValidUUID(result.data.profile_id), 'Profile ID n√£o √© um UUID v√°lido');

  console.log('‚úÖ Teste de integridade da resposta passou');
});

// Teste 3: Concorr√™ncia de requisi√ß√µes
test('Teste 3: Concorr√™ncia de requisi√ß√µes', async () => {
  console.log('\nüß™ Teste 3: Concorr√™ncia de requisi√ß√µes');

  const basePhone = '11900000';
  const numRequests = 5;
  const testPromises = [];

  // Criar m√∫ltiplas requisi√ß√µes simult√¢neas
  for (let i = 0; i < numRequests; i++) {
    const testData = {
      name: `Teste Concorrente ${i + 1}`,
      phone: `${basePhone}${String(i).padStart(3, '0')}`,
      building: 'Edif√≠cio Concorr√™ncia',
      apartment: `${100 + i}`,
      building_id: '123e4567-e89b-12d3-a456-426614174000',
      temporary_password: `ConcPass${i}!`,
    };

    testPromises.push(
      makeRequest('/api/register-resident', testData).then((result) => ({
        ...result,
        testData,
      }))
    );
  }

  // Executar todas as requisi√ß√µes simultaneamente
  console.log(`üì§ Enviando ${numRequests} requisi√ß√µes simult√¢neas...`);
  const startTime = Date.now();
  const results = await Promise.all(testPromises);
  const endTime = Date.now();
  const totalTime = endTime - startTime;

  // Verificar se todas foram bem-sucedidas
  let successCount = 0;
  for (const result of results) {
    if (result.status === 200) {
      successCount++;

      // Verificar estrutura da resposta
      assert.ok(
        result.data.profile_id && result.data.email && result.data.building_name && result.data.apartment_number,
        `Resposta incompleta para ${result.testData.phone}`
      );

      // Verificar se os dados correspondem
      assert.equal(
        result.data.building_name,
        result.testData.building,
        `Dados incorretos na resposta para ${result.testData.phone}`
      );
      assert.equal(result.data.apartment_number, result.testData.apartment);
    } else {
      console.error(`‚ùå Falha na requisi√ß√£o para ${result.testData.phone}:`, result.error);
    }
  }

  console.log(`‚úÖ ${successCount}/${numRequests} requisi√ß√µes bem-sucedidas`);
  console.log(`‚è±Ô∏è Tempo total: ${totalTime}ms (${(totalTime / numRequests).toFixed(2)}ms por requisi√ß√£o)`);

  assert.equal(
    successCount,
    numRequests,
    `Apenas ${successCount} de ${numRequests} requisi√ß√µes foram bem-sucedidas`
  );

  console.log('‚úÖ Teste de concorr√™ncia passou');
});

// Teste de rollback em caso de erro
test('Teste 4: Rollback em Caso de Erro', async () => {
  console.log('\nüß™ Teste 4: Rollback em Caso de Erro');
  console.log('='.repeat(60));

  const invalidData = {
    name: 'Teste Rollback',
    phone: getTestPhoneNumber(),
    building: '', // Campo inv√°lido para for√ßar erro
    apartment: '101',
  };

  try {
    console.log('\nüì§ Enviando requisi√ß√£o com dados inv√°lidos...');
    const response = await makeRequest('/api/register-resident', invalidData);

    // Deve retornar erro
    if (response.status === 200) {
      console.log('‚ö†Ô∏è  API aceitou dados inv√°lidos (comportamento inesperado)');
    } else {
      console.log(`‚úÖ API rejeitou dados inv√°lidos (status: ${response.status})`);
    }

    // Verificar se nenhum dado foi persistido
    console.log('\nüîç Verificando se nenhum dado foi persistido...');

    const { data: tempPasswords, error } = await supabase
      .from('temporary_passwords')
      .select('*')
      .eq('phone', invalidData.phone);

    if (error) {
      console.log('‚ö†Ô∏è  Erro ao consultar banco:', error.message);
    }

    if (!tempPasswords || tempPasswords.length === 0) {
      console.log('‚úÖ Nenhum dado foi persistido (rollback correto)');
    } else {
      console.log('‚ö†Ô∏è  Dados foram persistidos mesmo com erro:', tempPasswords);
    }

    console.log('\nüéâ Teste de Rollback PASSOU');
  } catch (error: any) {
    console.log('\n‚ùå Teste de Rollback FALHOU:', error.message);
    throw error;
  } finally {
    console.log('\nüßπ Teste de rollback finalizado');
  }
});
